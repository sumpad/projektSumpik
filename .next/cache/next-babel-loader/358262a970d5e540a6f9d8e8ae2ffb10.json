{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport cookie from \"cookie\";\nimport Head from \"next/head\";\nimport PropTypes from \"prop-types\";\nimport React from \"react\";\nimport { getDataFromTree } from \"react-apollo\";\nimport initApollo from \"./initApollo\";\nimport { isBrowser } from \"./isBrowser\";\n\nfunction parseCookies(req, options = {}) {\n  return cookie.parse(req ? req.headers.cookie || \"\" : document.cookie, options);\n}\n\nexport default (App => {\n  var _class, _temp;\n\n  return _temp = _class = class WithData extends React.Component {\n    static async getInitialProps(ctx) {\n      const {\n        Component,\n        router,\n        ctx: {\n          req,\n          res\n        }\n      } = ctx;\n      const apollo = initApollo({}, {\n        getToken: () => parseCookies(req).qid\n      });\n      ctx.ctx.apolloClient = apollo;\n      let appProps = {};\n\n      if (App.getInitialProps) {\n        appProps = await App.getInitialProps(ctx);\n      }\n\n      if (res && res.finished) {\n        // When redirecting, the response is finished.\n        // No point in continuing to render\n        return {};\n      }\n\n      if (!isBrowser) {\n        // Run all graphql queries in the component tree\n        // and extract the resulting data\n        try {\n          // Run all GraphQL queries\n          await getDataFromTree(__jsx(App, _extends({}, appProps, {\n            Component: Component,\n            router: router,\n            apolloClient: apollo\n          })));\n        } catch (error) {\n          // Prevent Apollo Client GraphQL errors from crashing SSR.\n          // Handle them in components via the data.error prop:\n          // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n          console.error(\"Error while running `getDataFromTree`\", error);\n        } // getDataFromTree does not call componentWillUnmount\n        // head side effect therefore need to be cleared manually\n\n\n        Head.rewind();\n      } // Extract query data from the Apollo's store\n\n\n      const apolloState = apollo.cache.extract();\n      return _objectSpread({}, appProps, {\n        apolloState\n      });\n    }\n\n    constructor(props) {\n      super(props); // `getDataFromTree` renders the component first, the client is passed off as a property.\n      // After that rendering is done using Next's normal rendering pipeline\n\n      _defineProperty(this, \"apolloClient\", void 0);\n\n      this.apolloClient = initApollo(props.apolloState, {\n        getToken: () => {\n          return parseCookies().token;\n        }\n      });\n    }\n\n    render() {\n      return __jsx(App, _extends({}, this.props, {\n        apolloClient: this.apolloClient\n      }));\n    }\n\n  }, _defineProperty(_class, \"displayName\", `WithData(${App.displayName})`), _defineProperty(_class, \"propTypes\", {\n    apolloState: PropTypes.object.isRequired\n  }), _temp;\n});","map":{"version":3,"sources":["C:/wamp64/www/hello-next/lib/withApollo.tsx"],"names":["cookie","Head","PropTypes","React","getDataFromTree","initApollo","isBrowser","parseCookies","req","options","parse","headers","document","App","WithData","Component","getInitialProps","ctx","router","res","apollo","getToken","qid","apolloClient","appProps","finished","error","console","rewind","apolloState","cache","extract","constructor","props","token","render","displayName","object","isRequired"],"mappings":";;;;;;;;;;AACA,OAAOA,MAAP,MAAmB,QAAnB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,eAAT,QAAgC,cAAhC;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,SAASC,SAAT,QAA0B,aAA1B;;AAEA,SAASC,YAAT,CAAsBC,GAAtB,EAAiCC,OAAO,GAAG,EAA3C,EAA+C;AAC7C,SAAOT,MAAM,CAACU,KAAP,CACLF,GAAG,GAAGA,GAAG,CAACG,OAAJ,CAAYX,MAAZ,IAAsB,EAAzB,GAA8BY,QAAQ,CAACZ,MADrC,EAELS,OAFK,CAAP;AAID;;AAED,gBAAgBI,GAAD,IAAc;AAAA;;AAC3B,0BAAO,MAAMC,QAAN,SAAuBX,KAAK,CAACY,SAA7B,CAAuC;AAM5C,iBAAaC,eAAb,CAA6BC,GAA7B,EAAuC;AACrC,YAAM;AACJF,QAAAA,SADI;AAEJG,QAAAA,MAFI;AAGJD,QAAAA,GAAG,EAAE;AAAET,UAAAA,GAAF;AAAOW,UAAAA;AAAP;AAHD,UAIFF,GAJJ;AAKA,YAAMG,MAAM,GAAGf,UAAU,CACvB,EADuB,EAEvB;AACEgB,QAAAA,QAAQ,EAAE,MAAMd,YAAY,CAACC,GAAD,CAAZ,CAAkBc;AADpC,OAFuB,CAAzB;AAOAL,MAAAA,GAAG,CAACA,GAAJ,CAAQM,YAAR,GAAuBH,MAAvB;AAEA,UAAII,QAAQ,GAAG,EAAf;;AACA,UAAIX,GAAG,CAACG,eAAR,EAAyB;AACvBQ,QAAAA,QAAQ,GAAG,MAAMX,GAAG,CAACG,eAAJ,CAAoBC,GAApB,CAAjB;AACD;;AAED,UAAIE,GAAG,IAAIA,GAAG,CAACM,QAAf,EAAyB;AACvB;AACA;AACA,eAAO,EAAP;AACD;;AAED,UAAI,CAACnB,SAAL,EAAgB;AACd;AACA;AACA,YAAI;AACF;AACA,gBAAMF,eAAe,CACnB,MAAC,GAAD,eACMoB,QADN;AAEE,YAAA,SAAS,EAAET,SAFb;AAGE,YAAA,MAAM,EAAEG,MAHV;AAIE,YAAA,YAAY,EAAEE;AAJhB,aADmB,CAArB;AAQD,SAVD,CAUE,OAAOM,KAAP,EAAc;AACd;AACA;AACA;AACAC,UAAAA,OAAO,CAACD,KAAR,CAAc,uCAAd,EAAuDA,KAAvD;AACD,SAlBa,CAoBd;AACA;;;AACAzB,QAAAA,IAAI,CAAC2B,MAAL;AACD,OAjDoC,CAmDrC;;;AACA,YAAMC,WAAW,GAAGT,MAAM,CAACU,KAAP,CAAaC,OAAb,EAApB;AAEA,+BACKP,QADL;AAEEK,QAAAA;AAFF;AAID;;AAIDG,IAAAA,WAAW,CAACC,KAAD,EAAa;AACtB,YAAMA,KAAN,EADsB,CAEtB;AACA;;AAHsB;;AAItB,WAAKV,YAAL,GAAoBlB,UAAU,CAAC4B,KAAK,CAACJ,WAAP,EAAoB;AAChDR,QAAAA,QAAQ,EAAE,MAAM;AACd,iBAAOd,YAAY,GAAG2B,KAAtB;AACD;AAH+C,OAApB,CAA9B;AAKD;;AAEDC,IAAAA,MAAM,GAAG;AACP,aAAO,MAAC,GAAD,eAAS,KAAKF,KAAd;AAAqB,QAAA,YAAY,EAAE,KAAKV;AAAxC,SAAP;AACD;;AAjF2C,GAA9C,yCACwB,YAAWV,GAAG,CAACuB,WAAY,GADnD,wCAEqB;AACjBP,IAAAA,WAAW,EAAE3B,SAAS,CAACmC,MAAV,CAAiBC;AADb,GAFrB;AAmFD,CApFD","sourcesContent":["import { ApolloClient, NormalizedCacheObject } from \"apollo-boost\";\r\nimport cookie from \"cookie\";\r\nimport Head from \"next/head\";\r\nimport PropTypes from \"prop-types\";\r\nimport React from \"react\";\r\nimport { getDataFromTree } from \"react-apollo\";\r\nimport initApollo from \"./initApollo\";\r\nimport { isBrowser } from \"./isBrowser\";\r\n\r\nfunction parseCookies(req?: any, options = {}) {\r\n  return cookie.parse(\r\n    req ? req.headers.cookie || \"\" : document.cookie,\r\n    options\r\n  );\r\n}\r\n\r\nexport default (App: any) => {\r\n  return class WithData extends React.Component {\r\n    static displayName = `WithData(${App.displayName})`;\r\n    static propTypes = {\r\n      apolloState: PropTypes.object.isRequired\r\n    };\r\n\r\n    static async getInitialProps(ctx: any) {\r\n      const {\r\n        Component,\r\n        router,\r\n        ctx: { req, res }\r\n      } = ctx;\r\n      const apollo = initApollo(\r\n        {},\r\n        {\r\n          getToken: () => parseCookies(req).qid\r\n        }\r\n      );\r\n\r\n      ctx.ctx.apolloClient = apollo;\r\n\r\n      let appProps = {};\r\n      if (App.getInitialProps) {\r\n        appProps = await App.getInitialProps(ctx);\r\n      }\r\n\r\n      if (res && res.finished) {\r\n        // When redirecting, the response is finished.\r\n        // No point in continuing to render\r\n        return {};\r\n      }\r\n\r\n      if (!isBrowser) {\r\n        // Run all graphql queries in the component tree\r\n        // and extract the resulting data\r\n        try {\r\n          // Run all GraphQL queries\r\n          await getDataFromTree(\r\n            <App\r\n              {...appProps}\r\n              Component={Component}\r\n              router={router}\r\n              apolloClient={apollo}\r\n            />\r\n          );\r\n        } catch (error) {\r\n          // Prevent Apollo Client GraphQL errors from crashing SSR.\r\n          // Handle them in components via the data.error prop:\r\n          // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\r\n          console.error(\"Error while running `getDataFromTree`\", error);\r\n        }\r\n\r\n        // getDataFromTree does not call componentWillUnmount\r\n        // head side effect therefore need to be cleared manually\r\n        Head.rewind();\r\n      }\r\n\r\n      // Extract query data from the Apollo's store\r\n      const apolloState = apollo.cache.extract();\r\n\r\n      return {\r\n        ...appProps,\r\n        apolloState\r\n      };\r\n    }\r\n\r\n    apolloClient: ApolloClient<NormalizedCacheObject>;\r\n\r\n    constructor(props: any) {\r\n      super(props);\r\n      // `getDataFromTree` renders the component first, the client is passed off as a property.\r\n      // After that rendering is done using Next's normal rendering pipeline\r\n      this.apolloClient = initApollo(props.apolloState, {\r\n        getToken: () => {\r\n          return parseCookies().token;\r\n        }\r\n      });\r\n    }\r\n\r\n    render() {\r\n      return <App {...this.props} apolloClient={this.apolloClient} />;\r\n    }\r\n  };\r\n};"]},"metadata":{},"sourceType":"module"}