{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport cookie from \"cookie\";\nimport Head from \"next/head\";\nimport PropTypes from \"prop-types\";\nimport React from \"react\";\nimport { getDataFromTree } from \"react-apollo\";\nimport initApollo from \"./initApollo\";\nimport { isBrowser } from \"./isBrowser\";\n\nfunction parseCookies(req) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return cookie.parse(req ? req.headers.cookie || \"\" : document.cookie, options);\n}\n\nexport default (function (App) {\n  var _class, _temp;\n\n  return _temp = _class = /*#__PURE__*/function (_React$Component) {\n    _inherits(WithData, _React$Component);\n\n    var _super = _createSuper(WithData);\n\n    _createClass(WithData, null, [{\n      key: \"getInitialProps\",\n      value: function getInitialProps(ctx) {\n        var Component, router, _ctx$ctx, req, res, apollo, appProps, apolloState;\n\n        return _regeneratorRuntime.async(function getInitialProps$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                Component = ctx.Component, router = ctx.router, _ctx$ctx = ctx.ctx, req = _ctx$ctx.req, res = _ctx$ctx.res;\n                apollo = initApollo({}, {\n                  getToken: function getToken() {\n                    return parseCookies(req).qid;\n                  }\n                });\n                ctx.ctx.apolloClient = apollo;\n                appProps = {};\n\n                if (!App.getInitialProps) {\n                  _context.next = 8;\n                  break;\n                }\n\n                _context.next = 7;\n                return _regeneratorRuntime.awrap(App.getInitialProps(ctx));\n\n              case 7:\n                appProps = _context.sent;\n\n              case 8:\n                if (!(res && res.finished)) {\n                  _context.next = 10;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", {});\n\n              case 10:\n                if (isBrowser) {\n                  _context.next = 20;\n                  break;\n                }\n\n                _context.prev = 11;\n                _context.next = 14;\n                return _regeneratorRuntime.awrap(getDataFromTree(__jsx(App, _extends({}, appProps, {\n                  Component: Component,\n                  router: router,\n                  apolloClient: apollo\n                }))));\n\n              case 14:\n                _context.next = 19;\n                break;\n\n              case 16:\n                _context.prev = 16;\n                _context.t0 = _context[\"catch\"](11);\n                // Prevent Apollo Client GraphQL errors from crashing SSR.\n                // Handle them in components via the data.error prop:\n                // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n                console.error(\"Error while running `getDataFromTree`\", _context.t0);\n\n              case 19:\n                // getDataFromTree does not call componentWillUnmount\n                // head side effect therefore need to be cleared manually\n                Head.rewind();\n\n              case 20:\n                // Extract query data from the Apollo's store\n                apolloState = apollo.cache.extract();\n                return _context.abrupt(\"return\", _objectSpread({}, appProps, {\n                  apolloState: apolloState\n                }));\n\n              case 22:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, null, null, [[11, 16]], Promise);\n      }\n    }]);\n\n    function WithData(props) {\n      var _this;\n\n      _classCallCheck(this, WithData);\n\n      _this = _super.call(this, props); // `getDataFromTree` renders the component first, the client is passed off as a property.\n      // After that rendering is done using Next's normal rendering pipeline\n\n      _defineProperty(_assertThisInitialized(_this), \"apolloClient\", void 0);\n\n      _this.apolloClient = initApollo(props.apolloState, {\n        getToken: function getToken() {\n          return parseCookies().token;\n        }\n      });\n      return _this;\n    }\n\n    _createClass(WithData, [{\n      key: \"render\",\n      value: function render() {\n        return __jsx(App, _extends({}, this.props, {\n          apolloClient: this.apolloClient\n        }));\n      }\n    }]);\n\n    return WithData;\n  }(React.Component), _defineProperty(_class, \"displayName\", \"WithData(\".concat(App.displayName, \")\")), _defineProperty(_class, \"propTypes\", {\n    apolloState: PropTypes.object.isRequired\n  }), _temp;\n});","map":{"version":3,"sources":["C:/wamp64/www/hello-next/lib/withApollo.tsx"],"names":["cookie","Head","PropTypes","React","getDataFromTree","initApollo","isBrowser","parseCookies","req","options","parse","headers","document","App","ctx","Component","router","res","apollo","getToken","qid","apolloClient","appProps","getInitialProps","finished","console","error","rewind","apolloState","cache","extract","props","token","displayName","object","isRequired"],"mappings":"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","sourcesContent":["import { ApolloClient, NormalizedCacheObject } from \"apollo-boost\";\r\nimport cookie from \"cookie\";\r\nimport Head from \"next/head\";\r\nimport PropTypes from \"prop-types\";\r\nimport React from \"react\";\r\nimport { getDataFromTree } from \"react-apollo\";\r\nimport initApollo from \"./initApollo\";\r\nimport { isBrowser } from \"./isBrowser\";\r\n\r\nfunction parseCookies(req?: any, options = {}) {\r\n  return cookie.parse(\r\n    req ? req.headers.cookie || \"\" : document.cookie,\r\n    options\r\n  );\r\n}\r\n\r\nexport default (App: any) => {\r\n  return class WithData extends React.Component {\r\n    static displayName = `WithData(${App.displayName})`;\r\n    static propTypes = {\r\n      apolloState: PropTypes.object.isRequired\r\n    };\r\n\r\n    static async getInitialProps(ctx: any) {\r\n      const {\r\n        Component,\r\n        router,\r\n        ctx: { req, res }\r\n      } = ctx;\r\n      const apollo = initApollo(\r\n        {},\r\n        {\r\n          getToken: () => parseCookies(req).qid\r\n        }\r\n      );\r\n\r\n      ctx.ctx.apolloClient = apollo;\r\n\r\n      let appProps = {};\r\n      if (App.getInitialProps) {\r\n        appProps = await App.getInitialProps(ctx);\r\n      }\r\n\r\n      if (res && res.finished) {\r\n        // When redirecting, the response is finished.\r\n        // No point in continuing to render\r\n        return {};\r\n      }\r\n\r\n      if (!isBrowser) {\r\n        // Run all graphql queries in the component tree\r\n        // and extract the resulting data\r\n        try {\r\n          // Run all GraphQL queries\r\n          await getDataFromTree(\r\n            <App\r\n              {...appProps}\r\n              Component={Component}\r\n              router={router}\r\n              apolloClient={apollo}\r\n            />\r\n          );\r\n        } catch (error) {\r\n          // Prevent Apollo Client GraphQL errors from crashing SSR.\r\n          // Handle them in components via the data.error prop:\r\n          // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\r\n          console.error(\"Error while running `getDataFromTree`\", error);\r\n        }\r\n\r\n        // getDataFromTree does not call componentWillUnmount\r\n        // head side effect therefore need to be cleared manually\r\n        Head.rewind();\r\n      }\r\n\r\n      // Extract query data from the Apollo's store\r\n      const apolloState = apollo.cache.extract();\r\n\r\n      return {\r\n        ...appProps,\r\n        apolloState\r\n      };\r\n    }\r\n\r\n    apolloClient: ApolloClient<NormalizedCacheObject>;\r\n\r\n    constructor(props: any) {\r\n      super(props);\r\n      // `getDataFromTree` renders the component first, the client is passed off as a property.\r\n      // After that rendering is done using Next's normal rendering pipeline\r\n      this.apolloClient = initApollo(props.apolloState, {\r\n        getToken: () => {\r\n          return parseCookies().token;\r\n        }\r\n      });\r\n    }\r\n\r\n    render() {\r\n      return <App {...this.props} apolloClient={this.apolloClient} />;\r\n    }\r\n  };\r\n};"]},"metadata":{},"sourceType":"module"}