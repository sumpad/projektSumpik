{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { ApolloClient, InMemoryCache } from \"apollo-boost\";\nimport { setContext } from \"apollo-link-context\";\nimport { createHttpLink } from \"apollo-link-http\";\nimport fetch from \"isomorphic-unfetch\";\nimport { isBrowser } from \"./isBrowser\";\nvar apolloClient = null; // Polyfill fetch() on the server (used by apollo-client)\n\nif (!isBrowser) {\n  global.fetch = fetch;\n}\n\nfunction create(initialState, _ref) {\n  var getToken = _ref.getToken;\n  var httpLink = createHttpLink({\n    uri: \"http://localhost:3000/graphql\",\n    credentials: \"include\"\n  });\n  var authLink = setContext(function (_, _ref2) {\n    var headers = _ref2.headers;\n    var token = getToken();\n    return {\n      headers: _objectSpread({}, headers, {\n        cookie: token ? \"qid=\".concat(token) : \"\"\n      })\n    };\n  }); // Check out https://github.com/zeit/next.js/pull/4611 if you want to use the AWSAppSyncClient\n\n  return new ApolloClient({\n    connectToDevTools: isBrowser,\n    ssrMode: !isBrowser,\n    // Disables forceFetch on the server (so queries are only run once)\n    link: authLink.concat(httpLink),\n    cache: new InMemoryCache().restore(initialState || {})\n  });\n}\n\nexport default function initApollo(initialState, options) {\n  // Make sure to create a new client for every server-side request so that data\n  // isn't shared between connections (which would be bad)\n  if (!isBrowser) {\n    return create(initialState, options);\n  } // Reuse client on the client-side\n\n\n  if (!apolloClient) {\n    apolloClient = create(initialState, options);\n  }\n\n  return apolloClient;\n}","map":{"version":3,"sources":["C:/wamp64/www/hello-next/lib/initApollo.ts"],"names":["ApolloClient","InMemoryCache","setContext","createHttpLink","fetch","isBrowser","apolloClient","global","create","initialState","getToken","httpLink","uri","credentials","authLink","_","headers","token","cookie","connectToDevTools","ssrMode","link","concat","cache","restore","initApollo","options"],"mappings":";;;;;;AAAA,SACIA,YADJ,EAEIC,aAFJ,QAIS,cAJT;AAKE,SAASC,UAAT,QAA2B,qBAA3B;AACA,SAASC,cAAT,QAA+B,kBAA/B;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,SAASC,SAAT,QAA0B,aAA1B;AAEA,IAAIC,YAAwD,GAAG,IAA/D,C,CAEA;;AACA,IAAI,CAACD,SAAL,EAAgB;AACbE,EAAAA,MAAD,CAAgBH,KAAhB,GAAwBA,KAAxB;AACD;;AAMD,SAASI,MAAT,CAAgBC,YAAhB,QAA0D;AAAA,MAArBC,QAAqB,QAArBA,QAAqB;AACxD,MAAMC,QAAQ,GAAGR,cAAc,CAAC;AAC9BS,IAAAA,GAAG,EAAE,+BADyB;AAE9BC,IAAAA,WAAW,EAAE;AAFiB,GAAD,CAA/B;AAKA,MAAMC,QAAQ,GAAGZ,UAAU,CAAC,UAACa,CAAD,SAAoB;AAAA,QAAdC,OAAc,SAAdA,OAAc;AAC9C,QAAMC,KAAK,GAAGP,QAAQ,EAAtB;AACA,WAAO;AACLM,MAAAA,OAAO,oBACFA,OADE;AAELE,QAAAA,MAAM,EAAED,KAAK,iBAAUA,KAAV,IAAoB;AAF5B;AADF,KAAP;AAMD,GAR0B,CAA3B,CANwD,CAgBxD;;AACA,SAAO,IAAIjB,YAAJ,CAAiB;AACtBmB,IAAAA,iBAAiB,EAAEd,SADG;AAEtBe,IAAAA,OAAO,EAAE,CAACf,SAFY;AAED;AACrBgB,IAAAA,IAAI,EAAEP,QAAQ,CAACQ,MAAT,CAAgBX,QAAhB,CAHgB;AAItBY,IAAAA,KAAK,EAAE,IAAItB,aAAJ,GAAoBuB,OAApB,CAA4Bf,YAAY,IAAI,EAA5C;AAJe,GAAjB,CAAP;AAMD;;AAED,eAAe,SAASgB,UAAT,CAAoBhB,YAApB,EAAuCiB,OAAvC,EAAyD;AACtE;AACA;AACA,MAAI,CAACrB,SAAL,EAAgB;AACd,WAAOG,MAAM,CAACC,YAAD,EAAeiB,OAAf,CAAb;AACD,GALqE,CAOtE;;;AACA,MAAI,CAACpB,YAAL,EAAmB;AACjBA,IAAAA,YAAY,GAAGE,MAAM,CAACC,YAAD,EAAeiB,OAAf,CAArB;AACD;;AAED,SAAOpB,YAAP;AACD","sourcesContent":["import {\r\n    ApolloClient,\r\n    InMemoryCache,\r\n    NormalizedCacheObject\r\n  } from \"apollo-boost\";\r\n  import { setContext } from \"apollo-link-context\";\r\n  import { createHttpLink } from \"apollo-link-http\";\r\n  import fetch from \"isomorphic-unfetch\";\r\n  import { isBrowser } from \"./isBrowser\";\r\n  \r\n  let apolloClient: ApolloClient<NormalizedCacheObject> | null = null;\r\n  \r\n  // Polyfill fetch() on the server (used by apollo-client)\r\n  if (!isBrowser) {\r\n    (global as any).fetch = fetch;\r\n  }\r\n  \r\n  interface Options {\r\n    getToken: () => string;\r\n  }\r\n  \r\n  function create(initialState: any, { getToken }: Options) {\r\n    const httpLink = createHttpLink({\r\n      uri: \"http://localhost:3000/graphql\",\r\n      credentials: \"include\"\r\n    });\r\n  \r\n    const authLink = setContext((_, { headers }) => {\r\n      const token = getToken();\r\n      return {\r\n        headers: {\r\n          ...headers,\r\n          cookie: token ? `qid=${token}` : \"\"\r\n        }\r\n      };\r\n    });\r\n  \r\n    // Check out https://github.com/zeit/next.js/pull/4611 if you want to use the AWSAppSyncClient\r\n    return new ApolloClient({\r\n      connectToDevTools: isBrowser,\r\n      ssrMode: !isBrowser, // Disables forceFetch on the server (so queries are only run once)\r\n      link: authLink.concat(httpLink),\r\n      cache: new InMemoryCache().restore(initialState || {})\r\n    });\r\n  }\r\n  \r\n  export default function initApollo(initialState: any, options: Options) {\r\n    // Make sure to create a new client for every server-side request so that data\r\n    // isn't shared between connections (which would be bad)\r\n    if (!isBrowser) {\r\n      return create(initialState, options);\r\n    }\r\n  \r\n    // Reuse client on the client-side\r\n    if (!apolloClient) {\r\n      apolloClient = create(initialState, options);\r\n    }\r\n  \r\n    return apolloClient;\r\n  }"]},"metadata":{},"sourceType":"module"}